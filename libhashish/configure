#! /bin/bash
#
# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#
# Copyright (C) 2007 Hagen Paul Pfeifer <hagen@jauu.net>
#  
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without 
# modifications, as long as this notice is preserved.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


### Default Values
# (change here or use configure option interface (the clean way))

prefix=/usr

# version
MAJOR_REL=0
MINOR_REL=2

PACKAGE_NAME="libhashish"


# compiler flags

# -W -Wall -> enable most relevant warnings
# -Wundef  -> undefined but used macros
# -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations
#          -> check for good prototyping 
WARNINGS="-pipe -Wall -W -Wwrite-strings -Wsign-compare \
-Wpointer-arith -Wcast-align \
-Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations \
-Wnested-externs -Winline -Wshadow -Wformat=2"





### Stop Editing Here  (expect you know what you are doing)

# Developer Notes:
#
# o Take a look at the end of this file of this configure-script
#   for the script execution order
# 
# o If you add an test-case note the order (e.g. check_for_alloca)
#   1. STDOUT output
#   2. config.h output
#
# o Script improvements, hints or anything else is welcome!
#   send email to the netsend developers
#   (http://netsend.berlios.de/deve.html)


# internal values

c_red='\e[31,1m'
c_reset='\e[0m'

cc_flags=""
compiler=""

exec 5>./config.log
 
echo "\
This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.
" 1>&5

# function declarations

usage()
{
  cat << EOF
  Usage: configure [options]
  Options: [defaults in brackets after descriptions]
  Configuration:
    --help                         print this message
    --prefix=PREFIX                install architecture-independent files in PREFIX (/usr)
    --enable-debug                 enable debug information (#define DEBUG and add CFLAGS -g)
    --enable-perf-debug            inject timing gather code (#define PERFDEBUG)
    --enable-eye-candy             utilize GD library to enable hash distribution map image
    --enable-thread-locking        default behaviour is a not thread clean behaviour (no mutex locks)
    --enable-memory-check          enable glibc buildin malloc() memory checks
    --disable-rbtree               disable red-black tree backend support
    --with-features=huge           enable eye candy at the moment
    --compiler=/PATH/TO/COMPILER   use specific compiler as the primary compiler
EOF
}

parse_args()
{
	ac_prev=

	for ac_option
	do
		if test -n "$ac_prev"; then
			eval "$ac_prev=\$ac_option"
			ac_prev=
			continue
		fi

		case "$ac_option" in
			-*=*) ac_optarg=`echo "$ac_option" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
			*) ac_optarg= ;;
		esac

		case "$ac_option" in

			--enable-debug | -enable-debug)
			debug="yes"
			;;

			--enable-perf-debug | -enable-perf-debug)
			perfdebug="yes"
			;;

			--enable-thread-locking | -enable-thread-locking)
			threadclean="yes"
			;;

			--enable-memory-check | -enable-memory-check)
			memorycheck="yes"
			;;
			--disable-rbtree | -disable-rbtree)
			no_rbtree="yes"
			;;

			--enable-eye-candy | --eye-candy=yes)
			eye_candy="yes"
			;;

			-help | --help | -h)
			usage;
			exit 0;
			;;

			-prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
			ac_prev=prefix
			;;
			-prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
			prefix="$ac_optarg"
			;;

			-features=* | --features=* | --with-features=*)
			if [ "$ac_optarg" == "huge" ] ; then
				eye_candy="yes"
			fi
			;;
			
			-compiler=* | --compiler=*)
			compiler="$ac_optarg"
			;;

			-*) { echo "configure: error: $ac_option: invalid option; use --help to show usage" 1>&2; exit 1; }
			;;

			*)
			;;

		esac
	done
}

print_config_header()
{
	# stdout stuff
	echo "*** configure-ng ***"

	# Make.Rules stuff
	echo -e "# Make.Rules.  Generated by configure script\n"  > Make.Rules

	# config.h stuff
	echo -n "/* Generated config.h see configure script for"  > config.h
	echo    " further information */"                        >> config.h
	echo    "#ifndef __CONFIG_H"                             >> config.h
	echo    "#define __CONFIG_H"                             >> config.h
}

print_config_footer()
{
	echo    "#endif /* __CONFIG_H */"                         >> config.h
}


create_make_rules()
{
	cflags_save="$CFLAGS"

	echo "prefix =  $prefix"             					>> Make.Rules
	echo "exec_prefix = \${prefix}"      					>> Make.Rules
	echo                                 					>> Make.Rules
	echo  "bindir = \${exec_prefix}/bin"					>> Make.Rules
	echo  "libdir = \${exec_prefix}/lib"					>> Make.Rules
	echo  "includedir = \${exec_prefix}/include"	>> Make.Rules

	# save source topdir
	topdir=$(pwd)
	echo "TOPDIR=$topdir"	>> Make.Rules
	
	# package name
	echo "PACKAGE_NAME=$PACKAGE_NAME"      				>> Make.Rules
	echo                                   				>> Make.Rules
	echo "#define PACKAGE_NAME \"$PACKAGE_NAME\""	>> config.h

	# version information
	echo "MAJOR_REL=$MAJOR_REL"             >> Make.Rules
	echo "#define MAJOR_REL \"$MAJOR_REL\"" >> config.h
	echo "MINOR_REL=$MINOR_REL"             >> Make.Rules
	echo "#define MINOR_REL \"$MINOR_REL\"" >> config.h
	echo                                    >> Make.Rules

	# check for compiler
	echo -n "checking for compiler... "
	if [ ! -z $compiler ] ; then # user selected an compiler through commandline
		if [ ! -x $compiler ] ; then
			echo "$compiler not executable!"
			exit
		fi
		echo "CC=$compiler" >> Make.Rules
	else
		_compiler=$(which gcc)
		if [ $? -ne 0 ] ; then # don't found gcc
			_compiler=$(which cc)
			if [ $? -ne 0 ] ; then # don't found cc
				echo "failed"
				exit 1
			else
				echo " $_compiler"
				echo "CC=$_compiler" >> Make.Rules
				compiler="$_compiler"
			fi
		else
			echo " $_compiler"
			echo "CC=$_compiler" >> Make.Rules
			compiler=$_compiler
		fi
	fi

	# compiler flags
	if [ "$debug" = yes ] ; then
		echo "XCFLAGS=-g -O0 -DDEBUG"          >> Make.Rules
		cc_flags="-g -O0 -DDEBUG"
	else
		echo "XCFLAGS=$cflags_save"            >> Make.Rules
		cc_flags="$cflags_save"
	fi
	echo "WARNINGS = $WARNINGS"              >> Make.Rules
	echo "CFLAGS += \$(WARNINGS) \$(XCFLAGS)" >> Make.Rules
	
	if [ "$threadclean" = yes ] ; then
		echo "THREADFLAGS=-lpthread -DTHREADSAFE"  >> Make.Rules
	else
		echo "THREADFLAGS="            >> Make.Rules
	fi
	echo "CFLAGS += \$(THREADFLAGS) " >> Make.Rules

	# performance falgs
	if [ "$memorycheck" = yes ] ; then
		echo "MALLOCFLAGS=-DDMALLOC" >> Make.Rules
	else
		echo "MALLOCFLAGS="            >> Make.Rules
	fi
	echo "CFLAGS += \$(MALLOCFLAGS)" >> Make.Rules


	# performance falgs
	if [ "$perfdebug" = yes ] ; then
		echo "PERFFLAGS=-DPERFDEBUG"          >> Make.Rules
	else
		echo "PERFFLAGS="            >> Make.Rules
	fi
	echo "CFLAGS += \$(PERFFLAGS)" >> Make.Rules

	if [ "$no_rbtree" = yes ] ; then
		echo "CFLAGS += -DLHI_DISABLE_RBTREE" >> Make.Rules
	fi
	# check for executables
	echo -n "checking for rm... "
	_rm=$(which rm)
	if [ $? -ne 0 ] ; then # don't found rm
		echo "can't find rm(1)!"
		exit 1
	fi
	echo "$_rm"
	echo "RM=$_rm" >> Make.Rules
	
	echo -n "checking for ar... "
	_ar=$(which ar)
	if [ $? -ne 0 ] ; then # don't found ar
		echo "can't find ar(1)!"
		exit 1
	fi
	echo "$_ar"
	echo "AR=$_ar" >> Make.Rules

	echo -n "checking for ld... "
	_ld=$(which ld)
	if [ $? -ne 0 ] ; then
		echo "can't find ld(1)!"
		exit 1
	fi
	echo "$_ld"
	echo "LD=$_ld" >> Make.Rules

	echo -n "checking for ranlib... "
	_ranlib=$(which ranlib)
	if [ $? -ne 0 ] ; then # don't found ranlib
		echo "can't find ranlib(1)!"
		exit 1
	fi
	echo "$_ranlib"
	echo "RANLIB=$_ranlib" >> Make.Rules

	echo -n "checking for mkdir... "
	_mkdir=$(which mkdir)
	if [ $? -ne 0 ] ; then # don't found mkdir
		echo "can't find mkdir(1)!"
		exit 1
	fi
	echo "$_mkdir"
	echo "MKDIR=$_mkdir" >> Make.Rules

	echo -n "checking for install... "
	_install=$(which install)
	if [ $? -ne 0 ] ; then # don't found install
		echo "can't find install(1)!"
		exit 1
	fi
	echo "$_install"
	echo "INSTALL=$_install" >> Make.Rules


	cc_flags="$WARNINGS $cc_flags"
}



check_for_alloca()
{
	echo -n "checking for alloca..."
	TMPDIR=`mktemp -d`
	cat > "$TMPDIR"/alloca.c <<EOF
#include <alloca.h>
int main(int argc, char **argv){
alloca(23);
return 0;
}
EOF
	$compiler -o /dev/null "$TMPDIR"/alloca.c >&5 2>&1
	if [ $? -eq 0 ];then
		echo " yes"
		echo "#define HAVE_ALLOCA 1" >>config.h
	else
		echo " no"
		echo "#undef HAVE_ALLOCA" >>config.h

	fi
	rm -f "$TMPDIR"/alloca.c
	rmdir "$TMPDIR"
}

check_for_rdtscll()
{
	echo -n "checking for rdtscll..."
	TMPDIR=`mktemp -d`
	cat > "$TMPDIR"/rdtscll.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <unistd.h>

#ifdef __linux__
#include <linux/timex.h>    /* rdtscll -- pentium processor tick counter */
#endif

int main(int argc, char **argv){
long long cnt;
rdtscll(cnt);
return 0;
}
EOF
	$compiler -o /dev/null "$TMPDIR"/rdtscll.c >&5 2>&1
	if [ $? -eq 0 ];then
		echo " yes"
		echo "#define HAVE_RDTSCLL 1" >>config.h
	else
		echo " no"
		echo "#undef HAVE_RDTSCLL" >>config.h

	fi
	rm -f "$TMPDIR"/rdtscll.c
	rmdir "$TMPDIR"
}

check_for_udplite()
{
	echo -n "checking for udplite support..."
	TMPDIR=`mktemp -d`
	cat > "$TMPDIR"/udplite.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>

int main(int argc, char **argv){
int proto = IPPROTO_UDPLITE;
return 0;
}
EOF
	$compiler -o /dev/null "$TMPDIR"/udplite.c >&5 2>&1
	if [ $? -eq 0 ];then
		echo " yes"
		echo "#define HAVE_UDPLITE 1" >>config.h
	else
		echo " no"
		echo "#undef HAVE_UDPLITE" >>config.h

	fi
	rm -f "$TMPDIR"/udplite.c
	rmdir "$TMPDIR"
}


check_for_splice()
{
	echo -n "checking for splice..."
	TMPDIR=`mktemp -d`
	cat > "$TMPDIR"/splice.c <<EOF
#define _GNU_SOURCE
#include <fcntl.h>
#include <stddef.h>
int main(void) {
	return splice(0, NULL, 1, NULL, 42, SPLICE_F_MOVE|SPLICE_F_MORE);
}
EOF
	$compiler -o /dev/null "$TMPDIR"/splice.c >&5 2>&1
	if [ $? -eq 0 ];then
		echo " yes"
		echo "#define HAVE_SPLICE 1" >>config.h
	else
		echo " no"
		echo "#undef HAVE_SPLICE" >>config.h

	fi
	rm -f "$TMPDIR"/splice.c
	rmdir "$TMPDIR"
}

check_for_posix_memalign()
{
	echo -n "checking for posix_memalign support..."
	TMPDIR=`mktemp -d`
	cat > "$TMPDIR"/posix_memalign.c <<EOF
#define _XOPEN_SOURCE 600
#include <stdlib.h>

int main(int argc, char **argv){
void * ptr;
int ret;
ret = posix_memalign(&ptr, 16, 23);
free(ptr);
return 0;
}
EOF
	$compiler -o /dev/null "$TMPDIR"/posix_memalign.c >&5 2>&1
	if [ $? -eq 0 ];then
		echo " yes"
		echo "#define HAVE_POSIX_MEMALIGN 1" >>config.h
	else
		echo " no"
		echo "#undef HAVE_POSIX_MEMALIGN" >>config.h

	fi
	rm -f "$TMPDIR"/posix_memalign.c
	rmdir "$TMPDIR"
}


check_for_gd_lib()
{
	if [ "$eye_candy" = yes ] ; then
		echo -n "checking for gd support..."
	TMPDIR=`mktemp -d`
	cat > "$TMPDIR"/gd.c <<EOF
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <stddef.h>
#include <gd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
int main(void) {
	gdImagePtr im;
	FILE *pngout, *jpegout;
	im = gdImageCreate(64, 64);
	return 0;
}
EOF
	$compiler -o /dev/null -lgd -lpng -lz -ljpeg -lfreetype -lm "$TMPDIR"/gd.c >&5 2>&1
		if [ $? -eq 0 ] ; then
			echo " yes"
			echo "#define HAVE_LIBGD 1" >>config.h
			echo "LIBGDFLAGS = -lgd -lpng -lz -ljpeg -lfreetype -lm" >> Make.Rules
		else
			echo " no"
			echo "#undef HAVE_LIBGD" >>config.h
			echo "LIBGDFLAGS = "     >> Make.Rules
		fi
	else
		echo "#undef HAVE_LIBGD" >>config.h
		echo "LIBGDFLAGS = "     >> Make.Rules
	fi
	rm -rf "$TMPDIR"
}

check_no_cpus()
{
	# see http://ndevilla.free.fr/threads/index.html
	# for a more portable check
		echo -n "checking for number of cpus..."
	TMPDIR=`mktemp -d`
	cat > "$TMPDIR"/cpus.c <<EOF
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <stddef.h>
#include <gd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
int main(void) {
	long i = sysconf(_SC_NPROCESSORS_CONF);
	return (int) i;
}
EOF
	$compiler -o "$TMPDIR"/cpu "$TMPDIR"/cpus.c >&5 2>&1
		if [ $? -eq 0 ] ; then
			"$TMPDIR"/cpu 1>/dev/null 2>&1
			cpus=$?
			if [ $cpus -gt 0 ] ; then
				echo " $cpus"
				echo "#define NOCPUS $cpus" >>config.h
			else
				echo "#define NOCPUS 0" >>config.h
			fi
		else
			echo "#define NOCPUS 0" >>config.h
		fi
	rm -rf "$TMPDIR"
}



# if we reach this function everything seems fine ;-)
print_config()
{
	echo 
	echo -e "Environment seems fine! ;)\n\nConfigure picked following defaults, options and paths:"
	echo -e "Please validate this values"
	echo
	make show
	echo
}


parse_args $*
print_config_header
# this checks for programms and compiler
create_make_rules

check_for_alloca
check_for_rdtscll
check_for_udplite
check_for_splice
check_for_posix_memalign
check_for_gd_lib
check_no_cpus

print_config_footer

print_config


# vim:set ts=2 sw=2 tw=78 noet:
